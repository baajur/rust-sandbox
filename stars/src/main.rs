use plotters::prelude::*;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let root = BitMapBackend::new("0.png", (1000, 1000)).into_drawing_area();
    root.fill(&White)?;
    let mut chart = ChartBuilder::on(&root)
        .caption("Equatorial coordinate system", ("Arial", 40).into_font())
        .margin(5)
        .x_label_area_size(20)
        .y_label_area_size(40)
        .build_ranged(-24f64..0f64, -90f64..90f64)?;

    chart.configure_mesh().x_labels(24).y_labels(30)
        .x_label_formatter(&|x| format!("{}", x.abs()) ).draw()?;

    let stars = vec![
        ("Polaris", ((02, 31, 49.09456), (1, 89, 15, 50.7923)), 2.02),
        ("Kochab", ((14, 50, 42.32580), (1, 74, 09, 19.8142)), 2.08),
        ("Dubhe", ((11, 03, 43.67152), (1, 61, 45, 03.7249)), 1.79),
        ("Caph", ((00, 09, 10.68518), (1, 59, 08, 59.2120)), 2.27),
        ("Merak", ((11, 01, 50.47654), (1, 56, 22, 56.7339)), 2.37),
        ("Alioth", ((12, 54, 01.74959), (1, 55, 57, 35.3627)), 1.77),
        (
            "Schedar",
            ((00, 40, 30.4410679), (1, 56, 32, 14.39217)),
            2.23,
        ),
        ("Mizar", ((13, 23, 55.54048), (1, 54, 55, 31.2671)), 2.27),
        ("Mirfak", ((03, 24, 19.37009), (1, 49, 51, 40.2455)), 1.79),
        (
            "Alkaid|Benetnasch",
            ((13, 47, 32.43776), (1, 49, 18, 47.7602)),
            1.86,
        ),
        ("Capella", ((05, 16, 41.35871), (1, 45, 59, 52.7693)), 0.08),
        ("Deneb", ((20, 41, 25.91514), (1, 45, 16, 49.2197)), 1.25),
        ("Vega", ((18, 36, 56.33635), (1, 38, 47, 01.2802)), 0.03),
        ("Castor", ((07, 34, 35.87319), (1, 31, 53, 17.8160)), 1.58),
        (
            "Alpheratz",
            ((00, 08, 23.25988), (1, 29, 05, 25.5520)),
            2.06,
        ),
        ("Pollux", ((07, 45, 18.94987), (1, 28, 01, 34.3160)), 1.14),
        (
            "Alphecca|Gemma",
            ((15, 34, 41.26800), (1, 26, 42, 52.8940)),
            2.24,
        ),
        (
            "Arcturus",
            ((14, 15, 39.67207), (1, 19, 10, 56.6730)),
            -0.05,
        ),
        (
            "Aldebaran",
            ((04, 35, 55.23907), (1, 16, 30, 33.4885)),
            0.86,
        ),
        ("Markab", ((23, 04, 45.65345), (1, 15, 12, 18.9617)), 2.48),
        ("Denebola", ((11, 49, 03.57834), (1, 14, 34, 19.4090)), 2.13),
        (
            "Rasalhague",
            ((17, 34, 56.06945), (1, 12, 33, 36.1346)),
            2.07,
        ),
        ("Regulus", ((10, 08, 22.31099), (1, 11, 58, 01.9516)), 1.40),
        ("Altair", ((19, 50, 46.99855), (1, 08, 52, 05.9563)), 0.76),
        (
            "Betelgeuse",
            ((05, 55, 10.30536), (1, 07, 24, 25.4304)),
            0.42,
        ),
        (
            "Bellatrix",
            ((05, 25, 07.86325), (1, 06, 20, 58.9318)),
            1.64,
        ),
        ("Procyon", ((07, 39, 18.11950), (1, 05, 13, 29.9552)), 0.37),
        ("Rigel", ((05, 14, 32.27210), (-1, 08, 12, 05.8981)), 0.13),
        ("Alphard", ((09, 27, 35.24270), (-1, 08, 39, 30.9583)), 1.97),
        ("Spica", ((13, 25, 11.57937), (-1, 11, 09, 40.7501)), 0.97),
        ("Sirius", ((06, 45, 08.91728), (-1, 16, 42, 58.0171)), -1.46),
        ("Diphda", ((00, 43, 35.37090), (-1, 17, 59, 11.7827)), 2.01),
        ("Antares", ((16, 29, 24.45970), (-1, 26, 25, 55.2094)), 0.91),
        ("Nunki", ((18, 55, 15.92650), (-1, 26, 17, 48.2068)), 2.067),
        (
            "Fomalhaut",
            ((22, 57, 39.04625), (-1, 29, 37, 20.0533)),
            1.16,
        ),
        ("Shaula", ((17, 33, 36.52012), (-1, 37, 06, 13.7648)), 1.62),
        (
            "Canopus",
            ((06, 23, 57.10988), (-1, 52, 41, 44.3810)),
            -0.74,
        ),
        (
            "Peacock",
            ((20, 25, 38.85705), (-1, 56, 44, 06.3230)),
            1.918,
        ),
        (
            "Achernar",
            ((01, 37, 42.84548), (-1, 57, 14, 12.3101)),
            0.46,
        ),
        ("Mimosa", ((12, 47, 43.26877), (-1, 59, 41, 19.5792)), 1.25),
        (
            "Hadar",
            // "Agena",
            ((14, 03, 49.40535), (-1, 60, 22, 22.9266)),
            0.60,
        ),
        // (
        //     "Rigil Kentaurus",
        //     // "alpha Centauri",
        //     ((14, 39, 36.204), (-1, 60, 50, 08.23)),
        //     0.01,
        // ),
        ("Acrux", ((12, 26, 35.89522), (-1, 63, 05, 56.7343)), 1.28),
        ("Atria", ((16, 48, 39.89508), (-1, 69, 01, 39.7626)), 1.92),
        (
            "Miaplacidus",
            ((09, 13, 11.97746), (-1, 69, 43, 01.9473)),
            1.69,
        ),
        ("Adhara", ((06, 58, 37.54876), (-1, 28, 58, 19.5102)), 1.50),
        ("Gacrux", ((12, 31, 09.95961), (-1, 57, 06, 47.5684)), 1.64),
        ("Elnath", ((05, 26, 17.51312), (1, 28, 36, 26.8262)), 1.65),
        ("Alnilam", ((05, 36, 12.81335), (-1, 01, 12, 06.9089)), 1.69),
        ("Alnair", ((22, 08, 13.98473), (-1, 46, 57, 39.5078)), 1.71),
        (
            "Al Suhail al-Muhlif",
            ((08, 09, 31.95013), (-1, 47, 20, 11.7108)),
            1.83,
        ),
        ("Alnitak", ((05, 40, 45.52666), (-1, 01, 56, 33.2649)), 1.79),
        (
            "Wezen",
            ((07, 08, 23.4805188773), (-1, 26, 23, 35.460726261)),
            1.84,
        ),
        (
            "Kaus Australis",
            ((18, 24, 10.31840), (-1, 34, 23, 04.6193)),
            1.85,
        ),
        ("Sargas", ((17, 37, 19.12985), (-1, 42, 59, 52.1808)), 1.862),
        (
            "Menkalinan",
            ((05, 59, 31.72293), (1, 44, 56, 50.7573)),
            1.90,
        ),
        ("Alhena", ((06, 37, 42.71050), (1, 16, 23, 57.4095)), 1.92),
        (
            "Alsephina",
            ((08, 44, 42.22658), (-1, 54, 42, 31.7493)),
            1.95,
        ),
        ("Avior", ((08, 22, 30.83526), (-1, 59, 30, 34.1431)), 1.953),
        (
            "Mirzam",
            ((06, 22, 41.9813538058), (-1, -17, 57, 21.275324448)),
            1.97,
        ),
        ("Hamal", ((02, 07, 10.40570), (1, 23, 27, 44.7032)), 2.01),
        ("Phecda", ((11, 53, 49.84732), (1, 53, 41, 41.1350)), 2.440),
        ("Megrez", ((12, 15, 25.56063), (1, 57, 01, 57.4156)), 3.320),
        ("Mintaka", ((05, 32, 00.40009), (-1, 00, 17, 56.7424)), 2.23),
        ("Sgr A*", ((17, 45, 40.03599), (-1, 29, 0, 28.1699)), 3.0),
        ("0", ((0, 0, 0.0), (1, 0, 0, 0.0)), 1.0),
        ("3", ((3, 0, 0.0), (1, 0, 0, 0.0)), 1.0),
        // ("6", ((6, 0, 0.0), (1, 0, 0, 0.0)), 1.0),
        ("9", ((9, 0, 0.0), (1, 0, 0, 0.0)), 1.0),
        ("12", ((12, 0, 0.0), (1, 0, 0, 0.0)), 1.0),
        ("15", ((15, 0, 0.0), (1, 0, 0, 0.0)), 1.0),
        ("18", ((18, 0, 0.0), (1, 0, 0, 0.0)), 1.0),
        ("21", ((21, 0, 0.0), (1, 0, 0, 0.0)), 1.0),
        ("24", ((24, 0, 0.0), (1, 0, 0, 0.0)), 1.0),
        ("90", ((12, 0, 0.0), (1, 90, 0, 0.0)), 1.0),
        ("75", ((12, 0, 0.0), (1, 75, 0, 0.0)), 1.0),
        ("60", ((12, 0, 0.0), (1, 60, 0, 0.0)), 1.0),
        ("45", ((12, 0, 0.0), (1, 45, 0, 0.0)), 1.0),
        ("30", ((12, 0, 0.0), (1, 30, 0, 0.0)), 1.0),
        // ("15", ((12, 0, 0.0), (1, 15, 0, 0.0)), 1.0),
        ("-15", ((12, 0, 0.0), (-1, 15, 0, 0.0)), 1.0),
        ("-30", ((12, 0, 0.0), (-1, 30, 0, 0.0)), 1.0),
        ("-45", ((12, 0, 0.0), (-1, 45, 0, 0.0)), 1.0),
        // ("-60", ((12, 0, 0.0), (-1, 60, 0, 0.0)), 1.0),
        ("-75", ((12, 0, 0.0), (-1, 75, 0, 0.0)), 1.0),
        ("-90", ((12, 0, 0.0), (-1, 90, 0, 0.0)), 1.0),
    ];
    let stars = stars.into_iter().map(Star::from).collect::<Vec<_>>();
    for star in &stars {
        let x = star.coord.alpha.to_rad() / (std::f64::consts::PI * 2_f64) * -24_f64;
        let y = star.coord.delta.to_rad() / (std::f64::consts::PI / 2_f64) * 90_f64;
        let size = match star.mag.round() as i32 {
            -2_i32 => panic!("{}: {}", star.name, star.mag),
            -1_i32 => 5,
            0_i32 => 4,
            1_i32 => 3,
            2_i32 => 2,
            3_i32 => 1,
            _ => panic!("{}: {}", star.name, star.mag),
        };
        let elm = EmptyElement::at((x, y))
            + Circle::new(
                (0, 0),
                size,
                ShapeStyle::from(&Black).filled(),
            )
            + Text::new(
                // format!("{}({:.3},{:.3})", star.name, x, y),
                format!("{}", star.name),
                (3, 0),
                ("Arial", 20).into_font().color(&Black.mix(size as f64/5_f64)),
            );
        chart.plotting_area().draw(&elm)?;
    }
    chart.draw_series(LineSeries::new(
        (-240_i64..=0).map(|x| {
            (
                (x as f64) / 10_f64,
                Delta::from((23, 26,52,21.406)).to_degree()
                    * (((x as f64 / 10_f64) / 24_f64) * std::f64::consts::PI * 2_f64
                        + std::f64::consts::PI )
                        .sin(),
            )
        }),
        &Red,
    ))?;
    chart.draw_series(LineSeries::new(
        (-240_i64..=0).map(|x| {
            let x = (x as f64) / 10_f64;
            
            (
                x,
                Delta::from((1, 62,52,0.0)).to_degree()
                    * 
                    (
                        (x / 24_f64) * (std::f64::consts::PI * 2_f64)
                        - (std::f64::consts::PI / 2_f64)
                        + Alpha::from((12,51, 26.282)).to_rad()
                    )
                        .sin(),
            )
        }),
        &Blue,
    ))?;
    Ok(())
}
struct Star {
    name: String,
    coord: Equatorial,
    mag: f64,
}
impl<S: Into<String>, E: Into<Equatorial>> From<(S, E, f64)> for Star {
    fn from(o: (S, E, f64)) -> Star {
        Star {
            name: o.0.into(),
            coord: o.1.into(),
            mag: o.2,
        }
    }
}
struct Equatorial {
    alpha: Alpha,
    delta: Delta,
}
impl<A: Into<Alpha>, D: Into<Delta>> From<(A, D)> for Equatorial {
    fn from(o: (A, D)) -> Equatorial {
        Equatorial {
            alpha: o.0.into(),
            delta: o.1.into(),
        }
    }
}
struct Alpha {
    h: i64,
    m: u64,
    s: f64,
}
impl Alpha {
    fn to_degree(&self) -> f64 {
        (360_f64 / 24_f64)
            * ((self.h as f64) + (self.m as f64 / 60_f64) + (self.s / 60_f64 / 60_f64))
    }
    fn to_rad(&self) -> f64 {
        (self.to_degree()  / 180_f64)* std::f64::consts::PI
    }
}
impl From<(i64, u64, f64)> for Alpha {
    fn from(o: (i64, u64, f64)) -> Alpha {
        Alpha {
            h: o.0,
            m: o.1,
            s: o.2,
        }
    }
}
struct Delta {
    flag: i8,
    deg: i64,
    m: u64,
    s: f64,
}
impl Delta {
    fn to_degree(&self) -> f64 {
        let flag = self.flag.signum() as f64;
        flag * ((self.deg as f64) + (self.m as f64 / 60_f64) + (self.s / 60_f64 / 60_f64))
    }
    fn to_rad(&self) -> f64 {
        (self.to_degree()/ 180_f64) * std::f64::consts::PI
    }
}
impl From<(i8, i64, u64, f64)> for Delta {
    fn from(o: (i8, i64, u64, f64)) -> Delta {
        Delta {
            flag: o.0,
            deg: o.1,
            m: o.2,
            s: o.3,
        }
    }
}
